# Link: https://practice.geeksforgeeks.org/problems/bae68b4d6a2a77fb6bd459cf7447240919ebfbf5/1
# Comments: https://discuss.geeksforgeeks.org/comment/4253d91b00cbde803ebb97d5dbdbb545
# Date: 27_FEB_2023
# Title: Reverse both parts
# TC: O(N); SC: O(1)
# Contributed By: Mridul Bhaskar




from typing import Optional

"""

Definition for singly Link List Node
class Node:
    def __init__(self,x):
        self.data=x
        self.next=None

You can also use the following for printing the link list.
printList(node)
"""

class Solution:
    def reverse(self, head : Optional['Node'], k : int) -> Optional['Node']:
        # code here
        temp = Node(-1)
        temp.next = head
        prev = None
        while(k>1):
            tempo = head.next
            head.next = prev
            prev = head
            head = tempo
            k-=1
        curr = head.next
        head.next = prev
        prev2 = None
        while(curr.next):
            tempo_ = curr.next
            curr.next = prev2
            prev2 = curr
            curr = tempo_
        curr.next = prev2
        temp.next.next = curr
        return head 
        
            
        



#{ 
 # Driver Code Starts

class Node:
    def __init__(self,x):
        self.data=x
        self.next=None

def printList(node):
    while (node != None):
        print(node.data,end=" ")
        node = node.next
    print()
def inputList():
    n=int(input())#lenght of link list
    data=[int(i) for i in input().strip().split()]#all data of linked list in a line
    head = Node(data[0])
    tail = head;
    for i in range(1,n):
        tail.next = Node(data[i]);
        tail = tail.next;
    return head;

if __name__=="__main__":
    t = int(input())
    for _ in range(t):
        
        head = inputList()
        
        
        k = int(input())
        
        obj = Solution()
        res = obj.reverse(head, k)
        
        printList(res)
        

# } Driver Code Ends